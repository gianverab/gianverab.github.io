{"version":3,"names":[],"mappings":"","sources":["app.js"],"sourcesContent":["(function () {\r\n  const site = document.querySelector('.site')\r\n  const trigger = document.querySelector('.trigger')\r\n  let screenReaderText = document.querySelector('.trigger .screen-reader-text')\r\n\r\n  // Initialize Firebase\r\n  const config = {\r\n    apiKey: \"AIzaSyB3VC7v1d2vsWnxYbH09xGRFboAqrAEn14\",\r\n    authDomain: \"mycontactform-5858e.firebaseapp.com\",\r\n    databaseURL: \"https://mycontactform-5858e.firebaseio.com\",\r\n    projectId: \"mycontactform-5858e\",\r\n    storageBucket: \"\",\r\n    messagingSenderId: \"539074768803\"\r\n  }\r\n  firebase.initializeApp(config)\r\n\r\n  // Reference messages collection\r\n  let messagesRef = firebase.database().ref('messages')\r\n\r\n  // Listening for form submit\r\n  const form = document.getElementById('contactForm')\r\n  const submit = document.getElementById('submit')\r\n  form.addEventListener('submit', submitForm)\r\n\r\n  // Submit form\r\n  function submitForm (e) {\r\n    e.preventDefault()\r\n\r\n    // Get values\r\n    let name = getInputVal('name')\r\n    let email = getInputVal('email')\r\n    let comments = getInputVal('comments')\r\n\r\n    // Save message\r\n    saveMessage(name, email, comments)\r\n\r\n    // Show alert\r\n    document.querySelector('.alert-success').style.display = 'block'\r\n\r\n    // Hide alert after 4 seconds\r\n    setTimeout(function () {\r\n      document.querySelector('.alert-success').style.display = 'none'\r\n    }, 4000)\r\n\r\n    // Reset form fields\r\n    document.getElementById('contactForm').reset()\r\n  }\r\n\r\n  function getInputVal (id) {\r\n    return document.getElementById(id).value\r\n  }\r\n\r\n  // Save messages to firebase\r\n  function saveMessage (name, email, comments) {\r\n    let newMessageRef = messagesRef.push()\r\n    newMessageRef.set({\r\n      name,\r\n      email,\r\n      comments\r\n    })\r\n  }\r\n\r\n  // Sticky nav\r\n  const nav = document.querySelector('.mainNav')\r\n  const menuitems = nav.querySelectorAll('mainNav-menu a')\r\n  const menuarray = Array.apply(null, menuitems)\r\n  const topOfNav = nav.offsetTop\r\n  const bigDevice = window.matchMedia( \"(min-width: 801px)\" );\r\n\r\n  function fixNav() {\r\n    if(window.scrollY >= topOfNav) {\r\n      if (bigDevice.matches) {\r\n        // window width is at least 801px\r\n        document.body.style.paddingTop = nav.offsetHeight + 'px'\r\n        document.body.classList.add('fixed-nav')\r\n      } else {\r\n        // window width is less than 801px\r\n        document.body.style.paddingTop = 0\r\n      }\r\n      \r\n    } else {\r\n      document.body.style.paddingTop = 0\r\n      document.body.classList.remove('fixed-nav')\r\n    }\r\n  }\r\n\r\n  window.addEventListener('scroll', fixNav)\r\n\r\n  // Toggle reveal class on body element, set aria-expanded and screen reader text on trigger:\r\n  function revealMenu () {\r\n    site.classList.toggle('reveal')\r\n    nav.classList.add('open')\r\n    trigger.getAttribute('aria-expanded') === 'false' ? trigger.setAttribute('aria-expanded', true) : trigger.setAttribute('aria-expanded', false)\r\n    screenReaderText.innerHTML === 'Reveal menu' ? screenReaderText.innerHTML = 'Hide menu' : screenReaderText.innerHTML = 'Reveal menu'\r\n  }\r\n\r\n  // Hide nav area when focus shifts away:\r\n  function catchFocus () {\r\n    if (trigger.getAttribute('aria-expanded') === 'true' && !(menuarray.includes(document.activeElement) || document.activeElement === trigger)) {\r\n      revealMenu()\r\n    } else {\r\n      return\r\n    }\r\n  }\r\n\r\n  function removeMenu () {\r\n    if (trigger.getAttribute('aria-expanded') === 'false') {\r\n      nav.classList.remove('open')\r\n    }\r\n  }\r\n\r\n  // Hide nav area when touch or click happens elsewhere:\r\n  function clickTarget (e) {\r\n    if (trigger.getAttribute('aria-expanded') === 'true' && !nav.contains(e.target)) {\r\n      revealMenu()\r\n    }\r\n  }\r\n\r\n  // Listen for clicks on trigger button:\r\n  trigger.addEventListener('click', revealMenu, false)\r\n\r\n  // Listen for focus changes:\r\n  site.addEventListener('focusin', catchFocus, true)\r\n\r\n  // Listen for clicks:\r\n  site.addEventListener('click', function (e) { clickTarget(e) }, true)\r\n  site.addEventListener('transitionend', removeMenu, false)\r\n})()\r\n"],"file":"app.min.js"}